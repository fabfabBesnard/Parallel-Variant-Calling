// Configuration file

nextflow.enable.dsl=1

params {
  // All these parameters can be defined by options in the command line. Command line option will overwrite the values of the parameters specified in this configuration file.

  //  Path to the directory that contains the pipeline scripts. For example /Pipeline_variant_RDP/script'

  // Full path to the file of the reference genome (.fa or .fasta or .gz)
  genomefasta = false 

  // Full path to directory and name of reads in fastq.gz. Only one argument is accepted, so you should use a pattern to select several files. Symbolic links are accepted, so you can group symlinks to sequencing files of a cohort to analyze in a dedicated folder of your analysis.
  // Example: "Sequence* _{1,2}.fastq" ( `{1,2}` for paired reads ). (Use quotes "" to ensure the correct interpretation of pattern)
  reads = false 

  // or 

  // Full path to directory and name of your reads in .bam. Only one argument is accepted, so you should use a pattern to select several files. You can provide your own bam from different experimentation with different readgroup.
  // Example: "Sequence*.bam" (Use quotes "" to ensure the correct interpretation of pattern)
  readsinbam = false 
  
  // Annotation source
  // Option 1: use snpeff pre-build annotation with option `annotationname`
  //With our default docker image, this option is only available for the following 9 species:
  //Arabidopsis thaliana, Physcomitrella_patens, Populus trichocarpa, Zea mays, 
  //Caenorhabditis elegans, Caenorhabditis briggsae, Drosophila melanogaster, 
  //Saccharomyces cerevisiae and Schizosaccharomyces pombe
  // Name of the organism (with a underscore instead of space)
  annotationname = false // [ 'Physcomitrella_patens' , 'Arabidopsis_thaliana', 'Caenorhabditis_elegans' etc.., or false ]
  
  // Option 2: Provide your own annotation file with `--annotationgff` to build a anootation prediction with snpEff
  // If your model organism is not allready included, you can provide a annotation file. Full path to file of annotation genome (.gff format)
  annotationgff = false // Full path to file of annotation genome (.gff)

  // Number of chromosome copy. Default: 1 (1 or 2)
  ploidy = 1 // 1 or 2 

  // (optional) Provide a reference file of trusty highly validated variants (.vcf) in order to apply a variant recalibration score (GATK). 
  //For exemple [Arabidopsis_thaliana]( https://1001genomes.org/data/GMI-MPI/releases/v3.1/)
  vqsrfile = false
  vqsrrate = 99.0
  
  // Other optional parameters:
  sampletable = false // replace default names of the fastq files by relevant meaningful names of your biological samples.
  outdir = 'results'
  minglobalqual = 200// per cohort 200 before
  mindepth = 1 // per sample 10 before
  help = false
  sample = false
}

// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// !!                DO NOT TOUCH                      !!
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

//Profil configuration

profiles {
  hello {
    process.conda = "$projectDir/conda_for_docker.yml"
  }
  singularity {
    process.conda = "$projectDir/conda_for_docker.yml"
    singularity.enabled = true
    singularity.cacheDir = "$baseDir/.singularity/"
    process {
      withLabel: bwa1 {
        container = "pegi3s/bwa"
        cpus = 1
      }
      withLabel: bwa {
        container = "dceoy/bwa:latest"
        cpus = 1
      }
      withLabel: fastqc {
        container = "biocontainers/fastqc:v0.11.9_cv8"
        cpus = 1
      }
      withLabel: samtools {
        container = "dceoy/samtools:latest"
        cpus = 1
      }
      withLabel: samtools1 {
        container = "lbmc/samtools:1.7"
        cpus = 1
      }
      withLabel: gatk {
        container = "broadinstitute/gatk:4.1.9.0"
        executor = "local"
        memory = "12 GB"
        cpus = 1
      }
      withLabel: snpeff {
        container = "fabricebesnard/snpeff:repeat-aware_latest"
        cpus = 1
      }
      withLabel: cnvnator {
        container = "clinicalgenomics/cnvnator:0.4.1"
        cpus = 1
      }
      withLabel: lumpy {
        container = "kfdrc/lumpy:0.2.13"
        cpus = 1
      }
      withLabel: breakdancer {
        container = "szarate/breakdancer:v1.4.3"
        cpus = 1
      }
      withLabel: pindel {
        container = "opengenomics/pindel"
        cpus = 1
      }
      withLabel: metasv {
        container = "ggcontainer/metasv:latest"
        cpus = 1
      }
      withLabel: multiQC {
        container = "lbmc/multiqc:1.7"
        cpus = 1
      }
    }
  }

  docker_conda {
    docker.enabled = true
    process.conda = "$projectDir/conda_for_docker.yml"
    process {
      withLabel: htseq {
        container =""
        cpus = 1
      }
      withLabel: bwa1 {
        container = "pegi3s/bwa"
        cpus = 1
      }
      withLabel: bwa {
        container = "dceoy/bwa:latest"
        cpus = 1
      }
      withLabel: fastqc {
        container = "biocontainers/fastqc:v0.11.9_cv8"
        cpus = 1
      }
      withLabel: samtools {
        container = "dceoy/samtools:latest"
        cpus = 1
      }
      withLabel: samtools1 {
        container = "lbmc/samtools:1.7"
        cpus = 1
      }
      withLabel: gatk {
        container = "broadinstitute/gatk:4.1.9.0"
        executor = "local"
        memory = "12 GB"
        cpus = 1
      }
      withLabel: snpeff {
        container = "fabricebesnard/snpeff:repeat-aware_latest"
        cpus = 1
      }
      withLabel: cnvnator {
        container = "clinicalgenomics/cnvnator:0.4.1"
        cpus = 1
      }
      withLabel: lumpy {
        container = "kfdrc/lumpy:0.2.13"
        cpus = 1
      }
      withLabel: breakdancer {
        container = "szarate/breakdancer:v1.4.3"
        cpus = 1
      }
      withLabel: pindel {
        container = "opengenomics/pindel:0.2.5b8"
        cpus = 1
      }
      withLabel: metasv {
        container = "ggcontainer/metasv:latest"
        cpus = 1
      }
      withLabel: multiQC {
        container = "lbmc/multiqc:1.7"
        cpus = 1
      }
    }
  }

  psmn{
    singularity.enabled = true
    singularity.cacheDir = "$baseDir/.singularity_psmn/"
    singularity.runOptions = "--bind /Xnfs,/scratch"
    process.conda = "$projectDir/conda_for_docker.yml"
    process{
      withLabel: samtools {
        container = "dceoy/samtools:latest"
        executor = "sge"
        clusterOptions = "-cwd -V"
        memory = "20GB"
        time = "12h"
        queue = "monointeldeb192,monointeldeb96,monointeldeb128"
      }
      withLabel: samtools1 {
        container = "lbmc/samtools:1.7"
        executor = "sge"
        clusterOptions = "-cwd -V"
        memory = "20GB"
        time = "12h"
        queue = "monointeldeb192,monointeldeb96,monointeldeb128"
      }

      withLabel: fastqc {
        container = "biocontainers/fastqc:v0.11.9_cv8"
        executor = "sge"
        clusterOptions = "-cwd -V"
        cpus = 1
        memory = "5GB"
        time = "6h"
        queue = "monointeldeb96"
      }
      withLabel: multiQC {
        container = "lbmc/multiqc:1.9"
        executor = "sge"
        clusterOptions = "-m e -cwd -V"
        cpus = 1
        memory = "5GB"
        time = "6h"
        queue = "monointeldeb96"
      }
      withLabel: picardtools {
        executor = "sge"
        clusterOptions = "-cwd -V"
        cpus = 1
        memory = "30GB"
        time = "12h"
        queue = "monointeldeb192,monointeldeb128"
      }
      withLabel: bwa {
        container = "dceoy/bwa:latest"
        executor = "sge"
        clusterOptions = "-cwd -V"
        cpus = 32
        memory = "40GB"
        time = "24h"
        queue = "CLG6242deb384A,CLG6242deb384C,CLG5218deb192A,CLG5218deb192B,CLG5218deb192C,CLG5218deb192D"
        penv = "openmp32"
      }
      withLabel: bwa1 {
        container = "pegi3s/bwa"
        executor = "sge"
        clusterOptions = "-cwd -V"
        cpus = 32
        memory = "40GB"
        time = "24h"
        queue = "CLG6242deb384A,CLG6242deb384C,CLG5218deb192A,CLG5218deb192B,CLG5218deb192C,CLG5218deb192D"
        penv = "openmp32"
      }
      withLabel: gatk {
        container = "broadinstitute/gatk:4.1.9.0"
        executor = "sge"
        clusterOptions = "-cwd -V"
        cpus = 32
        memory = "30GB"
        time = "24h"
        queue = "CLG6242deb384A,CLG6242deb384C,CLG5218deb192A,CLG5218deb192B,CLG5218deb192C,CLG5218deb192D"
        penv = "openmp32"
      }
      withLabel: cnvnator {
        container = "clinicalgenomics/cnvnator:0.4.1"
        executor = "sge"
        clusterOptions = "-cwd -V"
        cpus = 1
        memory = "50GB"
        time = "12h"
        queue = "monointeldeb192,monointeldeb128"
      }
      withLabel: lumpy {
        container = "kfdrc/lumpy:0.2.13"
        executor = "sge"
        clusterOptions = "-cwd -V"
        cpus = 1
        memory = "50GB"
        time = "12h"
        queue = "monointeldeb192,monointeldeb128"
      }
      withLabel: breakdancer {
        container = "szarate/breakdancer:v1.4.3"
        executor = "sge"
        clusterOptions = "-cwd -V"
        cpus = 1
        memory = "20GB"
        time = "12h"
        queue = "monointeldeb192,monointeldeb96,monointeldeb128"
      }
      withLabel: pindel {
        container = "opengenomics/pindel:0.2.5b8"
        executor = "sge"
        clusterOptions = "-cwd -V"
        cpus = 32
        memory = "60GB"
        time = "24h"
        queue = "CLG6242deb384A,CLG6242deb384C,CLG5218deb192A,CLG5218deb192B,CLG5218deb192C,CLG5218deb192D"
        penv = "openmp32"
      }
      withLabel: metasv {
        container = "ggcontainer/metasv:latest"
        executor = "sge"
        clusterOptions = "-cwd -V"
        cpus = 32
        memory = "60GB"
        time = "24h"
        queue = "CLG6242deb384A,CLG6242deb384C,CLG5218deb192A,CLG5218deb192B,CLG5218deb192C,CLG5218deb192D"
        penv = "openmp32"
      }
      withLabel: snpeff {
        container = "fabricebesnard/snpeff:repeat-aware_latest"
        executor = "sge"
        clusterOptions = "-cwd -V"
        cpus = 1
        memory = "20GB"
        time = "12h"
        queue = "monointeldeb192,monointeldeb96,monointeldeb128"
      }
    }
  }
}
